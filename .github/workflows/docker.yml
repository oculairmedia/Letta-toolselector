name: Docker Build & Deploy

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [mcp-server, api-server, sync-service]
    
    outputs:
      image-digest-mcp-server: ${{ steps.build-mcp-server.outputs.digest }}
      image-digest-api-server: ${{ steps.build-api-server.outputs.digest }}
      image-digest-sync-service: ${{ steps.build-sync-service.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      # Build MCP Server
      - name: Build and push MCP Server
        if: matrix.service == 'mcp-server'
        id: build-mcp-server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE=mcp-server

      # Build API Server
      - name: Build and push API Server
        if: matrix.service == 'api-server'
        id: build-api-server
        uses: docker/build-push-action@v5
        with:
          context: ./lettaaugment-source
          file: ./lettaaugment-source/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build Sync Service
      - name: Build and push Sync Service
        if: matrix.service == 'sync-service'
        id: build-sync-service
        uses: docker/build-push-action@v5
        with:
          context: ./lettaaugment-source
          file: ./lettaaugment-source/Dockerfile.sync
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 2: Security Scanning for Images
  docker-security:
    runs-on: ubuntu-latest
    needs: docker-build
    strategy:
      matrix:
        service: [mcp-server, api-server, sync-service]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-${{ matrix.service }}.sarif'

  # Job 3: Integration Tests with Docker Compose
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      weaviate:
        image: semitechnologies/weaviate:1.25.0
        ports:
          - 8080:8080
          - 50051:50051
        env:
          QUERY_DEFAULTS_LIMIT: 25
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
          PERSISTENCE_DATA_PATH: './data'
          DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
          ENABLE_MODULES: 'text2vec-openai'
          CLUSTER_HOSTNAME: 'node1'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          LETTA_API_URL=https://test-api.example.com/v1
          LETTA_PASSWORD=test-password
          OPENAI_API_KEY=test-key
          WEAVIATE_URL=http://localhost:8080/
          EMBEDDING_PROVIDER=openai
          EOF

      - name: Test docker-compose build
        run: |
          docker-compose -f compose.yaml build
          docker-compose -f compose.yaml config

      - name: Run integration tests
        run: |
          # Start services
          docker-compose -f compose.yaml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Test MCP server health
          curl -f http://localhost:3020/health || exit 1
          
          # Test API server health  
          curl -f http://localhost:8020/health || exit 1
          
          # Test embedding configuration
          docker-compose exec -T api-server python3 embedding_config.py
          
          # Cleanup
          docker-compose -f compose.yaml down

  # Job 4: Deploy to Staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security, docker-integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging-letta-toolselector.yourdomain.com
    
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          echo "Images built and tested successfully"
          # Add your deployment commands here
          # e.g., kubectl, docker-compose, etc.

  # Job 5: Deploy to Production (on main branch or tags)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security, docker-integration-test]
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && github.event_name == 'push'
    environment:
      name: production
      url: https://letta-toolselector.yourdomain.com
    
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment"
          echo "Version: ${{ github.ref_name }}"
          # Add your deployment commands here
          
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Services Deployed**: MCP Server, API Server, Sync Service" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY

  # Job 6: Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Delete old container images
        uses: snok/container-retention-policy@v2
        with:
          image-names: |
            ${{ env.IMAGE_NAME }}-mcp-server
            ${{ env.IMAGE_NAME }}-api-server  
            ${{ env.IMAGE_NAME }}-sync-service
          cut-off: 30 days ago UTC
          account-type: org
          org-name: ${{ github.repository_owner }}
          keep-at-least: 5
          token: ${{ secrets.GITHUB_TOKEN }}