name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Validate Release
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Version: $VERSION"
          echo "Is pre-release: $(echo $VERSION | grep -E '(alpha|beta|rc)' && echo true || echo false)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-beta.1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check for CHANGELOG entry
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [ -f "CHANGELOG.md" ]; then
            if grep -q "$VERSION" CHANGELOG.md; then
              echo "✅ CHANGELOG.md contains entry for $VERSION"
            else
              echo "⚠️ No CHANGELOG.md entry found for $VERSION"
              echo "Consider adding release notes to CHANGELOG.md"
            fi
          else
            echo "ℹ️ No CHANGELOG.md file found"
          fi

  # Job 2: Build Release Assets
  build-release:
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        service: [mcp-server, api-server, sync-service]
    outputs:
      image-digest-mcp-server: ${{ steps.build-mcp-server.outputs.digest }}
      image-digest-api-server: ${{ steps.build-api-server.outputs.digest }}
      image-digest-sync-service: ${{ steps.build-sync-service.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      # Build MCP Server
      - name: Build and push MCP Server
        if: matrix.service == 'mcp-server'
        id: build-mcp-server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE=mcp-server

      # Build API Server
      - name: Build and push API Server
        if: matrix.service == 'api-server'
        id: build-api-server
        uses: docker/build-push-action@v5
        with:
          context: ./lettaaugment-source
          file: ./lettaaugment-source/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build Sync Service
      - name: Build and push Sync Service
        if: matrix.service == 'sync-service'
        id: build-sync-service
        uses: docker/build-push-action@v5
        with:
          context: ./lettaaugment-source
          file: ./lettaaugment-source/Dockerfile.sync
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Security Scanning for Release
  security-scan-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    strategy:
      matrix:
        service: [mcp-server, api-server, sync-service]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.validate-release.outputs.version }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Job 4: Generate Release Notes
  generate-release-notes:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, security-scan-release]
    outputs:
      release-notes: ${{ steps.notes.outputs.notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get previous tag for comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## 🚀 Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          # Add service information
          echo "### 📦 Services Released" >> release_notes.md
          echo "- **MCP Server**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mcp-server:$VERSION\`" >> release_notes.md
          echo "- **API Server**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-server:$VERSION\`" >> release_notes.md
          echo "- **Sync Service**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-sync-service:$VERSION\`" >> release_notes.md
          echo "" >> release_notes.md
          
          # Add changes since last release
          if [ ! -z "$PREVIOUS_TAG" ]; then
            echo "### 📝 Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "\`\`\`" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
            echo "\`\`\`" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add deployment instructions
          echo "### 🚀 Deployment" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Docker Compose" >> release_notes.md
          echo "\`\`\`yaml" >> release_notes.md
          echo "version: '3.8'" >> release_notes.md
          echo "services:" >> release_notes.md
          echo "  mcp-server:" >> release_notes.md
          echo "    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mcp-server:$VERSION" >> release_notes.md
          echo "  api-server:" >> release_notes.md
          echo "    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-server:$VERSION" >> release_notes.md
          echo "  sync-service:" >> release_notes.md
          echo "    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-sync-service:$VERSION" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          
          # Add verification steps
          echo "### ✅ Verification" >> release_notes.md
          echo "- Health check MCP server: \`curl http://localhost:3020/health\`" >> release_notes.md
          echo "- Health check API server: \`curl http://localhost:8020/health\`" >> release_notes.md
          echo "" >> release_notes.md
          
          # Security information
          echo "### 🔒 Security" >> release_notes.md
          echo "All images have been scanned for CRITICAL and HIGH severity vulnerabilities." >> release_notes.md
          echo "" >> release_notes.md
          
          # Set output for use in release
          {
            echo "notes<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Upload release notes as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md

  # Job 5: Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, security-scan-release, generate-release-notes]
    if: github.event_name != 'release'  # Don't create release if triggered by release event
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}

  # Job 6: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, security-scan-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: https://letta-toolselector.yourdomain.com
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying release ${{ needs.validate-release.outputs.version }} to production"
          echo "Services:"
          echo "- MCP Server: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mcp-server:${{ needs.validate-release.outputs.version }}"
          echo "- API Server: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-server:${{ needs.validate-release.outputs.version }}"
          echo "- Sync Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-sync-service:${{ needs.validate-release.outputs.version }}"
          # Add your production deployment commands here

      - name: Create deployment summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: MCP Server, API Server, Sync Service" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: All images scanned and verified" >> $GITHUB_STEP_SUMMARY

  # Job 7: Deploy to Staging (for pre-releases)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, security-scan-release]
    if: needs.validate-release.outputs.is_prerelease == 'true'
    environment:
      name: staging
      url: https://staging-letta-toolselector.yourdomain.com
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying pre-release ${{ needs.validate-release.outputs.version }} to staging"
          echo "Services:"
          echo "- MCP Server: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mcp-server:${{ needs.validate-release.outputs.version }}"
          echo "- API Server: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-server:${{ needs.validate-release.outputs.version }}"
          echo "- Sync Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-sync-service:${{ needs.validate-release.outputs.version }}"
          # Add your staging deployment commands here

  # Job 8: Notify on Success
  notify-success:
    runs-on: ubuntu-latest
    needs: [validate-release, deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success')
    steps:
      - name: Deployment notification
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          if [ "${{ needs.validate-release.outputs.is_prerelease }}" = "true" ]; then
            ENV="staging"
          else
            ENV="production"
          fi
          
          echo "✅ Successfully deployed $VERSION to $ENV environment"
          echo "🔗 Container images available at ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-*:$VERSION"