name: Security Scan

on:
  schedule:
    # Run security scans daily at 6 AM UTC
    - cron: '0 6 * * *'
  push:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/requirements.txt'
      - '**/package*.json'
      - '**/Dockerfile*'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/requirements.txt'
      - '**/package*.json'
      - '**/Dockerfile*'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job 1: Code Security Analysis
  code-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python Security
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python security tools
        run: |
          pip install bandit safety semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r lettaaugment-source/ -f json -o bandit-results.json
          bandit -r lettaaugment-source/ -f txt || true

      - name: Run Safety check for known vulnerabilities
        run: |
          cd lettaaugment-source
          safety check --json --output safety-results.json || true
          safety check || true

      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto --json --output=semgrep-results.json lettaaugment-source/ || true
          semgrep --config=auto lettaaugment-source/ || true

      # Node.js Security
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --json > npm-audit-results.json || true
          npm audit || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            semgrep-results.json
            npm-audit-results.json

  # Job 2: Container Security
  container-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: 
          - { path: "./Dockerfile", context: ".", name: "mcp-server" }
          - { path: "./lettaaugment-source/Dockerfile", context: "./lettaaugment-source", name: "api-server" }
          - { path: "./lettaaugment-source/Dockerfile.sync", context: "./lettaaugment-source", name: "sync-service" }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t security-scan:${{ matrix.dockerfile.name }} \
            -f ${{ matrix.dockerfile.path }} \
            ${{ matrix.dockerfile.context }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:${{ matrix.dockerfile.name }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile.name }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile.name }}.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ matrix.dockerfile.context }}
          format: 'sarif'
          output: 'trivy-fs-${{ matrix.dockerfile.name }}.sarif'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-${{ matrix.dockerfile.name }}.sarif'

  # Job 3: Secrets Detection
  secrets-detection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install detect-secrets
        run: pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --all-files --force-use-all-plugins \
            --exclude-files '.git/.*' \
            --exclude-files 'node_modules/.*' \
            --exclude-files '.env.example' \
            > .secrets.baseline

      - name: Verify no secrets found
        run: |
          if [ -s .secrets.baseline ] && grep -q '"results":' .secrets.baseline && [ "$(jq '.results | length' .secrets.baseline)" -gt 0 ]; then
            echo "❌ Potential secrets detected!"
            echo "Please review the following potential secrets:"
            jq '.results' .secrets.baseline
            exit 1
          else
            echo "✅ No secrets detected"
          fi

      - name: Upload secrets baseline
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-baseline
          path: .secrets.baseline

  # Job 4: Dependency License Check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python license check
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Install Python dependencies
        run: |
          cd lettaaugment-source
          pip install -r requirements.txt

      - name: Check Python licenses
        run: |
          cd lettaaugment-source
          pip-licenses --format=json --output-file=../python-licenses.json
          pip-licenses --format=plain-vertical

      # Node.js license check
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Install Node.js dependencies
        run: npm ci

      - name: Check Node.js licenses
        run: |
          license-checker --json --out nodejs-licenses.json || true
          license-checker || true

      - name: Upload license information
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.json
            nodejs-licenses.json

  # Job 5: OWASP ZAP Baseline Scan (when services are running)
  zap-baseline:
    runs-on: ubuntu-latest
    needs: [code-security, container-security]
    if: github.event_name != 'pull_request'  # Skip on PRs to avoid long running times
    services:
      weaviate:
        image: semitechnologies/weaviate:1.25.0
        ports:
          - 8080:8080
        env:
          QUERY_DEFAULTS_LIMIT: 25
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
          PERSISTENCE_DATA_PATH: './data'
          DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
          ENABLE_MODULES: 'text2vec-openai'
          CLUSTER_HOSTNAME: 'node1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          LETTA_API_URL=https://test-api.example.com/v1
          LETTA_PASSWORD=test-password
          OPENAI_API_KEY=test-key
          WEAVIATE_URL=http://localhost:8080/
          EMBEDDING_PROVIDER=openai
          EOF

      - name: Start services for testing
        run: |
          docker-compose -f compose.yaml up -d --build
          sleep 30

      - name: ZAP Baseline Scan - MCP Server
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3020'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 5 -T 60'

      - name: ZAP Baseline Scan - API Server
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8020'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 5 -T 60'

      - name: Cleanup services
        if: always()
        run: docker-compose -f compose.yaml down

  # Job 6: Generate Security Report
  security-report:
    runs-on: ubuntu-latest
    needs: [code-security, container-security, secrets-detection, license-check]
    if: always()
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📊 Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          if [ "${{ needs.code-security.result }}" = "success" ]; then
            echo "✅ **Code Security**: Passed" >> security-summary.md
          else
            echo "❌ **Code Security**: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.container-security.result }}" = "success" ]; then
            echo "✅ **Container Security**: Passed" >> security-summary.md
          else
            echo "❌ **Container Security**: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.secrets-detection.result }}" = "success" ]; then
            echo "✅ **Secrets Detection**: No secrets found" >> security-summary.md
          else
            echo "⚠️ **Secrets Detection**: Potential issues detected" >> security-summary.md
          fi
          
          if [ "${{ needs.license-check.result }}" = "success" ]; then
            echo "✅ **License Check**: Completed" >> security-summary.md
          else
            echo "❌ **License Check**: Issues detected" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## 🛡️ Recommendations" >> security-summary.md
          echo "- Review all identified vulnerabilities" >> security-summary.md
          echo "- Update dependencies with security patches" >> security-summary.md
          echo "- Address any licensing concerns" >> security-summary.md
          echo "- Monitor security advisories for used packages" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Post security summary to job summary
        run: |
          if [ -f security-summary.md ]; then
            cat security-summary.md >> $GITHUB_STEP_SUMMARY
          fi